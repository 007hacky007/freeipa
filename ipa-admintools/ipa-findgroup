#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

import sys
from optparse import OptionParser
import ipa.ipaclient as ipaclient
import ipa.ipaadminutil as ipaadminutil
import ipa.config

import errno
import sys
import xmlrpclib
import kerberos

def usage():
    print "ipa-findgroup [-a|--all] [-n|--notranslate] group"
    sys.exit()

def parse_options():
    parser = OptionParser()

    parser.add_option("-a", "--all", action="store_true", dest="all",
                      help="Show all group attributes")
    parser.add_option("-n", "--notranslate", action="store_true",
                      dest="notranslate",
                      help="Don't translate LDAP attributes into readable labels")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def main():
    group={}
    options, args = parse_options()

    if options.usage or len(args) != 2:
        usage()

    try:
        client = ipaclient.IPAClient()
        if options.all is None:
            groups = client.find_groups(args[1], ['cn','description','gidnumber','nsAccountLock'])
        else:
            groups = client.find_groups(args[1], sattrs=['*','nsAccountLock'])

        counter = groups[0]
        groups = groups[1:]
        groupindex = -1
        if counter == 0:
            print "No entries found for", args[1]
            return 2
        elif counter == -1:
            print "These results are truncated."
            print "Please refine your search and try again."

        if counter > 1:
            groupindex = ipaadminutil.select_group(counter, groups)
            if groupindex == "q":
                return 0

        if groupindex >= 0:
            groups = [groups[groupindex]]
   
        for ent in groups:
            try:
                members = client.group_members(ent.dn, ['dn','cn'])
            except ipa.ipaerror.IPAError, e:
                print "Error getting members for " + ent.dn
                print str(e)
                continue
            attr = ent.attrList()
            if options.notranslate:
                labels = {}
                for a in attr:
                    labels[a] = a
            else:
                labels = client.attrs_to_labels(attr)

            print "dn: " + ent.dn

            for a in attr:
                value = ent.getValues(a)
                if isinstance(value,str):
                    print labels[a] + ": " + value
                else:
                    print labels[a] + ": "
                    for l in value:
                        print "\t" +  l

            counter = members[0]
            members = members[1:]

            if counter > 0:
                print "Members:"
                for m in members:
                    print "    " + m.getValue('cn') + ": " + m.dn
            # blank line between results
            print 

    except xmlrpclib.Fault, fault:
        if fault.faultCode == errno.ECONNREFUSED:
            print "The IPA XML-RPC service is not responding."
        else:
            print fault.faultString
        return 1
    except kerberos.GSSError, e:
        print "Could not initialize GSSAPI: %s/%s" % (e[0][0][0], e[0][1][0])
        return 1
    except xmlrpclib.ProtocolError, e:
        print "Unable to connect to IPA server: %s" % (e.errmsg)
        return 1
    except ipa.ipaerror.IPAError, e:
        print "%s" % (e.message)
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())
