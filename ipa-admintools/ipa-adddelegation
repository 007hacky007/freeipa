#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

import sys
from optparse import OptionParser
import ipa
import ipa.user
import ipa.ipaclient as ipaclient
import ipa.ipavalidate as ipavalidate
import ipa.config
import ipa.aci

import xmlrpclib
import kerberos
import krbV
import ldap

def usage():
    print "ipa-adddelgation [-a|--attributes attr1,attr2,..,attrn] [-s|--source STRING] [-t|--target STRING] name"
    sys.exit(1)

def parse_options():
    parser = OptionParser()
    parser.add_option("-a", "--attributes", dest="attributes",
                      help="The attributes the source group may change in the target group")
    parser.add_option("-s", "--source", dest="source",
                      help="The source group name")
    parser.add_option("-t", "--target", dest="target",
                      help="The target group name")
    parser.add_option("--usage", action="store_true",
                      help="Program usage")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def main():

    options, args = parse_options()

    if len(args) != 2:
        print "args is %s" % len(args)
        usage()

    if not options.attributes or not options.source or not options.target:
        usage()

    try:
        client = ipaclient.IPAClient()

        source_grp = client.find_groups(options.source)
        if source_grp[0] > 1:
            print "Multiple matches found for %s." % options.source
            return 2
        elif source_grp[0] == 0:
            print "No matches found for %s." % options.source
            return 2

        target_grp = client.find_groups(options.target)
        if target_grp[0] > 1:
            print "Multiple matches found for %s." % options.target
            return 3
        elif target_grp[0] == 0:
            print "No matches found for %s." % options.target
            return 3

        attr_list = options.attributes.split(',')

        new_aci = ipa.aci.ACI()
        new_aci.name = args[1]
        new_aci.source_group = source_grp[1].dn
        new_aci.dest_group = target_grp[1].dn
        new_aci.attrs = attr_list

        aci_entry = client.get_aci_entry(['*', 'aci'])

        # Look for an existing ACI of the same name
        aci_str_list = aci_entry.getValues('aci')
        if aci_str_list is None:
            aci_str_list = []
        if not(isinstance(aci_str_list,list) or isinstance(aci_str_list,tuple)):
            aci_str_list = [aci_str_list]

        for aci_str in aci_str_list:
            try:
                old_aci = ipa.aci.ACI(aci_str)
                if old_aci.name == new_aci.name:
                    print "A delegation of that name already exists"
                    return 2
            except SyntaxError:
                # ignore aci_str's that ACI can't parse
                pass

        aci_entry = client.get_aci_entry(['dn'])
        aci_entry.setValue('aci', new_aci.export_to_string())

        client.update_entry(aci_entry)
    except xmlrpclib.Fault, f:
        print f.faultString
        return 1
    except kerberos.GSSError, e:
        print "Could not initialize GSSAPI: %s/%s" % (e[0][0][0], e[0][1][0])
        return 1
    except xmlrpclib.ProtocolError, e:
        print "Unable to connect to IPA server: %s" % (e.errmsg)
        return 1
    except ipa.ipaerror.IPAError, e:
        print "%s" % (e.message)
        return 1

    print "Delegation %s successfully added" % args[1]
    return 0

if __name__ == "__main__":
    sys.exit(main())
