#!/usr/bin/python

# Authors:
#   Jason Gerard DeRose <jderose@redhat.com>
#
# Copyright (C) 2008  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA

"""
Command Line Interface to IPA.

Just proof of concept stuff in here right now.
"""

import sys
from ipalib.startup import api

TAB_WIDTH = 2

def _(msg):
	"""
	Dummy gettext function for testing.
	"""
	return msg

class row(object):
	def __init__(self, tab, c1, c2=None):
		assert type(tab) is int
		assert type(c1) is str
		assert type(c2) is str or c2 is None
		self.tab = tab
		self.c1 = c1
		self.c2 = c2

	def __len__(self):
		return len(str(self.c1))

	def pretty_print(self, ljust):
		tab = ' ' * (self.tab * TAB_WIDTH)
		if self.c2 is None:
			print '%s%s' % (tab, self.c1)
		else:
			print '%s%s %s' % (tab, self.c1.ljust(ljust),	self.c2)

def pretty_print(rows):
	def at_tab(tab):
		for r in rows:
			if r.tab == tab:
				yield len(r)

	_max_len = {}
	def max_len(tab):
		if tab not in _max_len:
			_max_len[tab] = max(at_tab(tab))
		return _max_len[tab]

	for r in rows:
		r.pretty_print(max_len(r.tab))


def print_commands():
	print 'Commands:'
	m = api.max_cmd_len
	for cmd in api.cmd:
		print '  %s  %s' % (str(cmd).ljust(m), cmd.get_doc(_))

def print_help(cmd):
	print 'Help on %s' % cmd








def iter_ns(tab, name):
	ns = getattr(api, name)
	yield row(
		tab,
		'%d %s:' % (len(ns), name)
	)
	for i in ns:
		yield row(
			tab + 1,
			i.name,
			repr(i)
		)



def print_api():
	rows = []
	for name in ['cmd', 'obj', 'mthd', 'prop']:
		rows.extend(iter_ns(0, name))

	pretty_print(rows)




if len(sys.argv) < 2:
	print_commands()
	print 'Usage: ipa COMMAND [OPTIONS]'
	sys.exit(2)
name= sys.argv[1]
if name == '_api_':
	print_api()
	sys.exit()
elif name not in api.cmd:
	print_commands()
	print 'ipa: ERROR: unknown command %r' % name
	sys.exit(2)
api.cmd[name]()
