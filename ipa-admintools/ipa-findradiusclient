#! /usr/bin/python -E
# Authors: John Dennis <jdennis@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

import sys
from optparse import OptionParser
import ipa
from ipa.radius_client import *
import ipa.ipaclient as ipaclient
import ipa.ipavalidate as ipavalidate
import ipa.config
import ipa.ipaerror
import ipa.ipautil

import xmlrpclib
import kerberos
import ldap

#------------------------------------------------------------------------------

def parse_options():
    parser = OptionParser()
    parser.add_option("--usage", action="store_true",
                      help="Program usage")
    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

#------------------------------------------------------------------------------

attr_to_name = ipa.ipautil.CIDict({
    'radiusClientNASIpAddress' : 'IP Address',
    'radiusClientSecret'       : 'Secret',
    'radiusClientNASType'      : 'NAS Type',
    'radiusClientShortName'    : 'Name',
    'description'              : 'Description',
 })

# FIXME
def usage():
    print "ipa-findradiusclients ip_addr [ip_addr ...]"
    sys.exit(1)

def main():
    attrs=['radiusClientNASIpAddress', 'radiusClientSecret', 'radiusClientNASType', 'radiusClientShortName', 'description']

    options, args = parse_options()

    if len(args) < 2:
        usage()

    ip_addrs = args[1:]

    try:
        ipa_client = ipaclient.IPAClient()
        radius_clients = ipa_client.find_radius_clients(ip_addrs, sattrs=attrs)
        counter = radius_clients[0]
        radius_clients = radius_clients[1:]

        if counter == 0:
            print "No entries found for", ip_addrs
            return 2

        for radius_client in radius_clients:
            attrs = radius_client.attrList()
            attrs.sort()
            
            print "%s:" % radius_client.getValues('radiusClientNASIpAddress')
            for attr in attrs:
                value = radius_client.getValues(attr)
                print "\t%s = %s" % (attr_to_name[attr], value)

    except xmlrpclib.Fault, f:
        print f.faultString
        return 1
    except kerberos.GSSError, e:
        print "Could not initialize GSSAPI: %s/%s" % (e[0][0][0], e[0][1][0])
        return 1
    except xmlrpclib.ProtocolError, e:
        print "Unable to connect to IPA server: %s" % (e.errmsg)
        return 1
    except ipa.ipaerror.IPAError, e:
        print "%s" % (e.message)
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())
