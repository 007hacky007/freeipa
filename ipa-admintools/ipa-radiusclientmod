#! /usr/bin/python -E
# Authors: John Dennis <jdennis@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

import sys
from optparse import OptionParser
import ipa
from ipa.radius_client import *
import ipa.ipaclient as ipaclient
import ipa.ipavalidate as ipavalidate
import ipa.config
import ipa.ipaerror

import xmlrpclib
import kerberos
import ldap

#------------------------------------------------------------------------------

def parse_options():
    parser = OptionParser()
    parser.add_option("--usage", action="store_true",
                      help="Program usage")
    parser.add_option("-s", "--secret", dest="secret",
                      help="RADIUS client secret (required)")
    parser.add_option("-n", "--name", dest="name",
                      help="RADIUS client name")
    parser.add_option("-t", "--type", dest="nastype",
                      help="RADIUS client NAS Type")
    parser.add_option("-d", "--description", dest="desc", 
                      help="description of the RADIUS client")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

#------------------------------------------------------------------------------

# FIXME
def usage():
    print "ipa-radiusclientmod ip_addr"
    sys.exit(1)

def main():
    ip_addr = None
    secret = None
    name = None
    nastype = None
    desc = None

    options, args = parse_options()

    if len(args) != 2:
        usage()

    ip_addr = args[1]

    radius_client = ipa.radius_client.RadiusClient()
    ipa_client = ipaclient.IPAClient()
    try:
        radius_client = ipa_client.get_radius_client_by_ip_addr(ip_addr)
        pass
    except ipa.ipaerror.exception_for(ipa.ipaerror.LDAP_NOT_FOUND):
        print "client %s not found" % ip_addr
        return 1
    except ipa.ipaerror.IPAError, e:
        print "%s" % e.message
        return 1
    except kerberos.GSSError, e:
        print "Could not initialize GSSAPI: %s/%s" % (e[0][0][0], e[0][1][0])
        return 1

    if options.secret:
        secret = options.secret
        if not validate_secret(secret): return 1
        radius_client.setValue('radiusClientSecret', secret)

    if options.name:
        name = options.name
        if not validate_name(name): return 1
        radius_client.setValue('radiusClientShortName', name)

    if options.nastype:
        nastype = options.nastype
        if not validate_nastype(nastype): return 1
        radius_client.setValue('radiusClientNASType', nastype)
        
    if options.desc:
        desc = options.desc
        if not validate_desc(desc): return 1
        radius_client.setValue('description', desc)
       
    try:
        ipa_client.update_radius_client(radius_client)
        print "successfully modified"
    except xmlrpclib.Fault, f:
        print f.faultString
        return 1
    except kerberos.GSSError, e:
        print "Could not initialize GSSAPI: %s/%s" % (e[0][0][0], e[0][1][0])
        return 1
    except xmlrpclib.ProtocolError, e:
        print "Unable to connect to IPA server: %s" % (e.errmsg)
        return 1
    except ipa.ipaerror.IPAError, e:
        print "%s" % (e.message)
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())
