#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

import sys
from optparse import OptionParser
import ipa
import ipa.group
import ipa.ipaclient as ipaclient
import ipa.config
import ipa.ipaerror

import xmlrpclib
import kerberos
import ldap

def usage():
    print "ipa-addgroup [-d|--description STRING] group"
    sys.exit(1)

def parse_options():
    parser = OptionParser()
    parser.add_option("-d", "--description", dest="desc",
                      help="A description of this group")
    parser.add_option("-g", "--gid", dest="gid",
                      help="The gid to use for this group. If not included one is automatically set.")
    parser.add_option("--usage", action="store_true",
                      help="Program usage")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def main():
    group=ipa.group.Group()
    options, args = parse_options()

    if len(args) != 2:
        usage()

    group.setValue('cn', args[1])
    if options.desc:
        group.setValue('description', options.desc)
    if options.gid:
        group.setValue('gidnumber', options.gid)

    try:
        client = ipaclient.IPAClient()
        client.add_group(group)
        print args[1] + " successfully added"
    except xmlrpclib.Fault, f:
        print f.faultString
        return 1
    except kerberos.GSSError, e:
        print "Could not initialize GSSAPI: %s/%s" % (e[0][0][0], e[0][1][0])
        return 1
    except xmlrpclib.ProtocolError, e:
        print "Unable to connect to IPA server: %s" % (e.errmsg)
        return 1
    except ipa.ipaerror.IPAError, e:
        print "%s" % (e.message)
        return 1

    return 0

main()
