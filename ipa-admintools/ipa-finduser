#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

import sys
from optparse import OptionParser
import ipa.ipaclient as ipaclient
import ipa.config
import ipa.ipautil as ipautil
import base64

import sys
import xmlrpclib
import kerberos

def usage():
    print "ipa-finduser user"
    sys.exit()

def parse_options():
    parser = OptionParser()

    parser.add_option("-a", "--all", action="store_true", dest="all",
                      help="Set user's e-mail address")
    parser.add_option("--usage", action="store_true",
                      help="Program usage")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def wrap_binary_data(data):
    """Converts all binary data strings into base64-encoded objects for display
    """
    if isinstance(data, str):
        if ipautil.needs_base64(data):
            return base64.encodestring(data)
        else:
            return data
    elif isinstance(data, list) or isinstance(data,tuple):
        retval = []
        for value in data:
            retval.append(wrap_binary_data(value))
        return retval
    elif isinstance(data, dict):
        retval = {}
        for (k,v) in data.iteritems():
            retval[k] = wrap_binary_data(v)
        return retval
    else:
        return data

def main():
    user={}
    options, args = parse_options()

    if len(args) != 2:
        usage()

    try:
        client = ipaclient.IPAClient()
        if options.all is None:
            users = client.find_users(args[1], sattrs=['uid','cn','homeDirectory','loginshell'])
        else:
            users = client.find_users(args[1], sattrs=None)

        counter = users[0]
        users = users[1:]
        if counter == 0:
            print "No entries found for", args[1]
            return 2

        for ent in users:
            attr = ent.attrList()
            attr.sort()

            if options.all is True:
                print "dn: " + ent.dn

            for a in attr:
                value = ent.getValues(a)
                if isinstance(value,str):
                    print a + ": " + str(wrap_binary_data(value)).rstrip()
                else:
                    print a + ": "
                    for l in value:
                        print "\t" + wrap_binary_data(l)
            # blank line between results
            print 

    except xmlrpclib.Fault, fault:
        print fault.faultString
        return 1
    except kerberos.GSSError, e:
        print "Could not initialize GSSAPI: %s/%s" % (e[0][0][0], e[0][1][0])
        return 1
    except xmlrpclib.ProtocolError, e:
        print "Unable to connect to IPA server: %s" % (e.errmsg)
        return 1
    except ipa.ipaerror.IPAError, e:
        print "%s" % (e.message)
        return 1

    return 0

main()
