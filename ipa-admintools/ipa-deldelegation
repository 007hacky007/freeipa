#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#   
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#   

import sys
from optparse import OptionParser
import ipa.ipaclient as ipaclient
import ipa.config

import xmlrpclib
import kerberos
import copy
import errno

import ipa.aci
from ipa import ipaerror

aci_fields = ['*', 'aci']

def usage():
    print "ipa-deldelgation name"
    sys.exit(1)

def parse_options():
    parser = OptionParser()
    parser.add_option("--usage", action="store_true",
                      help="Program usage")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def main():

    options, args = parse_options()

    if len(args) != 2:
        print "args is %s" % len(args)
        usage()

    client = ipaclient.IPAClient()
    try:
        aci_entry = client.get_aci_entry(aci_fields)

        aci_str_list = aci_entry.getValues('aci')
        if aci_str_list is None:
            aci_str_list = []
        if not(isinstance(aci_str_list,list) or isinstance(aci_str_list,tuple)):
            aci_str_list = [aci_str_list]

        for aci_str in aci_str_list:
            try:
                aci = ipa.aci.ACI(aci_str)
                if aci.name == args[1]:
                    acistr = aci_str
                    break
            except SyntaxError:
                # ignore aci_str's that ACI can't parse
                pass

        if acistr is None:
            print "No delegation %s found." % args[1]
            return 2

        old_aci_index = aci_str_list.index(acistr)

        new_aci_str_list = copy.deepcopy(aci_str_list)
        del new_aci_str_list[old_aci_index]
        aci_entry.setValue('aci', new_aci_str_list)

        client.update_entry(aci_entry)
    except xmlrpclib.Fault, fault:
        if fault.faultCode == errno.ECONNREFUSED:
            print "The IPA XML-RPC service is not responding."
        else:
            print fault.faultString
        return 1
    except (SyntaxError, ipaerror.IPAError), e:
        print "Delegation deletion failed: " + str(e)
        return 1
    except kerberos.GSSError, e:
        print "Could not initialize GSSAPI: %s/%s" % (e[0][0][0], e[0][1][0])
        return 1
    except xmlrpclib.ProtocolError, e:
        print "Unable to connect to IPA server: %s" % (e.errmsg)
        return 1
    except ipa.ipaerror.IPAError, e:
        print "%s" % (e.message)
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())
