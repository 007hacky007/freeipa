#! /usr/bin/python -E
# Authors: Karl MacMillan <kmacmillan@mentalrootkit.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
import sys

import getpass, ldap, re, krbV
import traceback, logging

from ipapython import ipautil
from ipaserver.install import replication, dsinstance, installutils
from ipaserver import ipaldap
from ipapython import version
from ipalib import errors, util

CACERT = "/etc/ipa/ca.crt"

# dict of command name and tuples of min/max num of args needed
commands = {
    "list":(0, 1, "[master fqdn]", ""),
    "connect":(1, 2, "<master fqdn> [other master fqdn]",
                    "must provide the name of the servers to connect"),
    "disconnect":(1, 2, "<master fqdn> [other master fqdn]",
                    "must provide the name of the server to disconnect"),
    "del":(1, 1, "<master fqdn>",
                    "must provide hostname of master to delete"),
    "re-initialize":(0, 0, "", ""),
    "force-sync":(0, 0, "", "")
}

def parse_options():
    from optparse import OptionParser

    parser = OptionParser(version=version.VERSION)
    parser.add_option("-H", "--host", dest="host", help="starting host")
    parser.add_option("-p", "--password", dest="dirman_passwd", help="Directory Manager password")
    parser.add_option("-v", "--verbose", dest="verbose", action="store_true", default=False,
                      help="provide additional information")
    parser.add_option("-f", "--force", dest="force", action="store_true", default=False,
                      help="ignore some types of errors")
    parser.add_option("--port", type="int", dest="port",
                      help="port number of other server")
    parser.add_option("--binddn", dest="binddn",
                      help="Bind DN to use with remote server")
    parser.add_option("--bindpw", dest="bindpw",
                      help="Password for Bind DN to use with remote server")
    parser.add_option("--winsync", dest="winsync", action="store_true", default=False,
                      help="This is a Windows Sync Agreement")
    parser.add_option("--cacert", dest="cacert",
                      help="Full path and filename of CA certificate to use with TLS/SSL to the remote server")
    parser.add_option("--win-subtree", dest="win_subtree",
                      help="DN of Windows subtree containing the users you want to sync (default cn=Users,<domain suffix)")
    parser.add_option("--passsync", dest="passsync",
                      help="Password for the Windows PassSync user")
    parser.add_option("--from", dest="fromhost", help="Host to get data from")

    options, args = parser.parse_args()

    valid_syntax = False

    if len(args):
        n = len(args) - 1
        k = commands.keys()
        for cmd in k:
            if cmd == args[0]:
                v = commands[cmd]
                err = None
                if n < v[0]:
                    err = v[3]
                elif n > v[1]:
                    err = "too many arguments"
                else:
                    valid_syntax = True
                if err:
                    parser.error("Invalid syntax: %s\nUsage: %s [options] %s" % (err, cmd, v[2]))

    if not valid_syntax:
        cmdstr = " | ".join(commands.keys())
        parser.error("must provide a command [%s]" % cmdstr)

    # set log level
    if options.verbose:
        # if verbose, output events at INFO level if not already
        mylogger = logging.getLogger()
        if mylogger.getEffectiveLevel() > logging.INFO:
            mylogger.setLevel(logging.INFO)
        # else user has already configured logging externally lower
    return options, args

def get_realm_name():
    c = krbV.default_context()
    return c.default_realm

def get_suffix():
    suffix = util.realm_to_suffix(get_realm_name())
    return ipaldap.IPAdmin.normalizeDN(suffix)

def test_connection(host):
    """
    Make a GSSAPI connection to the remote LDAP server to test out credentials.

    This is used so we can fall back to promping for the DM password.

    returns True if connection successful, False otherwise
    """
    try:
        replman = replication.ReplicationManager(host, None)
        ents = replman.find_replication_agreements()
        del replman
        return True
    except ldap.LOCAL_ERROR:
        return False

def list_masters(host, replica, dirman_passwd, verbose):

    if replica:
        try:
            repl = replication.ReplicationManager(replica, dirman_passwd)
            repl.suffix = get_suffix()
        except Exception, e:
            print "Failed to get data from '%s': %s" % (replica, str(e))
            return

        entries = repl.find_replication_agreements()

        for entry in entries:
            print entry.nsds5replicahost

            if verbose:
                print "  last init status: %s" % entry.nsds5replicalastinitstatus
                print "  last init ended: %s" % str(ipautil.parse_generalized_time(entry.nsds5replicalastinitend))
                print "  last update status: %s" % entry.nsds5replicalastupdatestatus
                print "  last update ended: %s" % str(ipautil.parse_generalized_time(entry.nsds5replicalastupdateend))
    else:
        try:
            conn = ipaldap.IPAdmin(host, 636, cacert=CACERT)
            if dirman_passwd:
                conn.do_simple_bind(bindpw=dirman_passwd)
            else:
                conn.sasl_interactive_bind_s('', ipaldap.sasl_auth)

            dn = 'cn=masters,cn=ipa,cn=etc,%s' % get_suffix()
            entries = conn.search_s(dn, ldap.SCOPE_ONELEVEL)

            for ent in entries:
                print ent.cn

        except Exception, e:
            print "Failed to get data from '%s': %s" % (host, str(e))
            return

def del_link(replica1, replica2, dirman_passwd, force=False):

    repl2 = None

    try:
        repl1 = replication.ReplicationManager(replica1, dirman_passwd)
        repl1.suffix = get_suffix()

        type1 = repl1.get_agreement_type(replica2)

        repl_list = repl1.find_ipa_replication_agreements()
        if not force and len(repl_list) <= 1 and type1 == replication.IPA_REPLICA:
            print "Cannot remove the last replication link of '%s'" % replica1
            print "Please use the 'del' command to remove it from the domain"
            return

    except ldap.NO_SUCH_OBJECT:
        print "'%s' has no replication agreement for '%s'" % (replica1, replica2)
        return
    except errors.NotFound:
        print "'%s' has no replication agreement for '%s'" % (replica1, replica2)
        return
    except Exception, e:
        print "Failed to get data from '%s': %s" % (replica1, str(e))
        return

    if type1 == replication.IPA_REPLICA:
        try:
            repl2 = replication.ReplicationManager(replica2, dirman_passwd)
            repl2.suffix = get_suffix()

            repl_list = repl1.find_ipa_replication_agreements()
            if not force and len(repl_list) <= 1:
                print "Cannot remove the last replication link of '%s'" % replica2
                print "Please use the 'del' command to remove it from the domain"
                return

        except ldap.NO_SUCH_OBJECT:
            print "'%s' has no replication agreement for '%s'" % (replica2, replica1)
            if not force:
                return
        except errors.NotFound:
            print "'%s' has no replication agreement for '%s'" % (replica2, replica1)
            if not force:
                return
        except Exception, e:
            print "Failed to get data from '%s': %s" % (replica2, str(e))
            if not force:
                return

    if repl2 and type1 == replication.IPA_REPLICA:
        failed = False
        try:
            repl2.delete_agreement(replica1)
            repl2.delete_referral(replica1)
        except ldap.LDAPError, e:
            desc = e.args[0]['desc'].strip()
            info = e.args[0].get('info', '').strip()
            print "Unable to remove agreement on %s: %s: %s" % (replica2, desc, info)
            failed = True
        except Exception, e:
            print "Unable to remove agreement on %s: %s" % (replica2, str(e))
            failed = True

        if failed:
            if force:
                print "Forcing removal on '%s'" % replica1
            else:
                return

    if not repl2 and force:
        print "Forcing removal on '%s'" % replica1

    repl1.delete_agreement(replica2)
    repl1.delete_referral(replica2)

def del_master(replman, hostname, force=False):
    has_repl_agreement = True
    try:
        t = replman.get_agreement_type(hostname)
    except ldap.NO_SUCH_OBJECT:
        print "No replication agreement found for '%s'" % hostname
        if force:
            has_repl_agreement = False
        else:
            return
    except errors.NotFound:
        print "No replication agreement found for '%s'" % hostname
        if force:
            has_repl_agreement = False
        else:
            return

    if has_repl_agreement:
        # Delete the remote agreement first
        if t == replication.IPA_REPLICA:
            failed = False
            try:
                other_replman = replication.ReplicationManager(hostname, replman.dirman_passwd)
                other_replman.suffix = get_suffix()
                other_replman.delete_agreement(replman.conn.host)
            except ldap.LDAPError, e:
                desc = e.args[0]['desc'].strip()
                info = e.args[0].get('info', '').strip()
                print "Unable to remove agreement on %s: %s: %s" % (hostname, desc, info)
                failed = True
            except Exception, e:
                print "Unable to remove agreement on %s: %s" % (hostname, str(e))
                failed = True

            if failed:
                if force:
                    print "Forcing removal on local server"
                else:
                    return

        # Delete the local agreement
        replman.delete_agreement(hostname)

    try:
        replman.replica_cleanup(hostname, get_realm_name(), force=True)
    except Exception, e:
        print "Failed to cleanup %s entries: %s" % (hostname, str(e))
        print "You may need to manually remove them from the tree"

def add_link(replica1, replica2, dirman_passwd, options):

    other_args = {}
    if options.port:
        other_args['port'] = options.port
    if options.binddn:
        other_args['binddn'] = options.binddn
    if options.bindpw:
        other_args['bindpw'] = options.bindpw
    if options.cacert:
        other_args['cacert'] = options.cacert
    if options.win_subtree:
        other_args['win_subtree'] = options.win_subtree
    if options.passsync:
        other_args['passsync'] = options.passsync
    if options.winsync:
        other_args['winsync'] = True
        if not options.binddn or not options.bindpw or not options.cacert or not options.passsync:
            logging.error("The arguments --binddn, --bindpw, --passsync and --cacert are required to create a winsync agreement")
            sys.exit(1)

    if options.cacert:
        # have to install the given CA cert before doing anything else
        ds = dsinstance.DsInstance(realm_name = get_realm_name(),
                                   dm_password = dirman_passwd)
        if not ds.add_ca_cert(options.cacert):
            print "Could not load the required CA certificate file [%s]" % options.cacert
            return
        else:
            print "Added CA certificate %s to certificate database for %s" % (options.cacert, replica1)

    # need to wait until cacert is installed as that command may restart
    # the directory server and kill the connection
    try:
        repl1 = replication.ReplicationManager(replica1, dirman_passwd)
        repl1.suffix = get_suffix()

    except ldap.NO_SUCH_OBJECT:
        print "Cannot find replica '%s'" % replica1
        return
    except errors.NotFound:
        print "Cannot find replica '%s'" % replica1
        return
    except Exception, e:
        print "Failed to get data from '%s': %s" % (replica1, str(e))
        return

    repl1.setup_replication(replica2, get_realm_name(), **other_args)
    print "Connected '%s' to '%s'" % (replica1, replica2)

def re_initialize(options):

    if not options.fromhost:
        print "re-initialize requires the option --from <host name>"
        sys.exit(1)

    repl = replication.ReplicationManager(options.fromhost, options.dirman_passwd)
    repl.suffix = get_suffix()

    thishost = installutils.get_fqdn()

    filter = "(&(nsDS5ReplicaHost=%s)(|(objectclass=nsDSWindowsReplicationAgreement)(objectclass=nsds5ReplicationAgreement)))" % thishost
    entry = repl.conn.search_s("cn=config", ldap.SCOPE_SUBTREE, filter)
    if len(entry) == 0:
        logging.error("Unable to find %s -> %s replication agreement" % (options.fromhost, thishost))
        sys.exit(1)
    if len(entry) > 1:
        logging.error("Found multiple agreements for %s. Only initializing the first one returned: %s" % (thishost, entry[0].dn))

    repl.initialize_replication(entry[0].dn, repl.conn)
    repl.wait_for_repl_init(repl.conn, entry[0].dn)

    ds = dsinstance.DsInstance(realm_name = get_realm_name(), dm_password = options.dirman_passwd)
    ds.init_memberof()

def force_sync(options):

    if not options.fromhost:
        print "force-sync requires the option --from <host name>"
        sys.exit(1)

    repl = replication.ReplicationManager(options.fromhost, options.dirman_passwd)
    repl.suffix = get_suffix()

    thishost = installutils.get_fqdn()

    filter = "(&(nsDS5ReplicaHost=%s)(|(objectclass=nsDSWindowsReplicationAgreement)(objectclass=nsds5ReplicationAgreement)))" % thishost
    entry = repl.conn.search_s("cn=config", ldap.SCOPE_SUBTREE, filter)
    if len(entry) == 0:
        logging.error("Unable to find %s -> %s replication agreement" % (options.fromhost, thishost))
        sys.exit(1)
    if len(entry) > 1:
        logging.error("Found multiple agreements for %s. Only initializing the first one returned: %s" % (thishost, entry[0].dn))
    repl.force_synch(entry[0].dn, entry[0].nsds5replicaupdateschedule, repl.conn)

def main():
    options, args = parse_options()

    dirman_passwd = None

    if options.host:
        host = options.host
    else:
        host = installutils.get_fqdn()

    if options.dirman_passwd:
        dirman_passwd = options.dirman_passwd
    else:
        if not test_connection(host):
            dirman_passwd = getpass.getpass("Directory Manager password: ")

    options.dirman_passwd = dirman_passwd

    r = replication.ReplicationManager(host, dirman_passwd)
    r.suffix = get_suffix()

    if args[0] == "list":
        replica = None
        if len(args) == 2:
            replica = args[1]
        list_masters(host, replica, dirman_passwd, options.verbose)
    elif args[0] == "del":
        del_master(r, args[1], options.force)
    elif args[0] == "re-initialize":
        re_initialize(options)
    elif args[0] == "force-sync":
        force_sync(options)
    elif args[0] == "connect":
        if len(args) == 3:
            replica1 = args[1]
            replica2 = args[2]
        elif len(args) == 2:
            replica1 = host
            replica2 = args[1]
        add_link(replica1, replica2, dirman_passwd, options)
    elif args[0] == "disconnect":
        if len(args) == 3:
            replica1 = args[1]
            replica2 = args[2]
        elif len(args) == 2:
            replica1 = host
            replica2 = args[1]
        del_link(replica1, replica2, dirman_passwd)

try:
    main()
except KeyboardInterrupt:
    sys.exit(1)
except SystemExit, e:
    sys.exit(e)
except ldap.INVALID_CREDENTIALS:
    print "Invalid password"
    sys.exit(1)
except ldap.INSUFFICIENT_ACCESS:
    print "Insufficient access"
    sys.exit(1)
except ldap.LOCAL_ERROR, e:
    print e.args[0]['info']
    sys.exit(1)
except ldap.SERVER_DOWN, e:
    print e.args[0]['desc']
except Exception, e:
    print "unexpected error: %s" % str(e)
    sys.exit(1)
