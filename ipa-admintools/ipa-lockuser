#! /usr/bin/python -E
# Authors: Rob Crittenden <rcritten@redhat.com>
#
# Copyright (C) 2007  Red Hat
# see file 'COPYING' for use and warranty information
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; version 2 only
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
#

import sys
from optparse import OptionParser
import ipa
import ipa.ipaclient as ipaclient
import ipa.config
import errno

import xmlrpclib
import kerberos

def usage():
    print "ipa-lockuser [-u|--unlock] user"
    sys.exit(1)

def parse_options():
    parser = OptionParser()
    parser.add_option("-u", "--unlock", action="store_true", dest="unlock",
                      help="Unlock a user's account")
    parser.add_option("--usage", action="store_true",
                      help="Program usage")

    args = ipa.config.init_config(sys.argv)
    options, args = parser.parse_args(args)

    return options, args

def main():
    options, args = parse_options()

    if options.usage or len(args) != 2:
        usage()

    msg = "inactivated"
    try:
        client = ipaclient.IPAClient()
        if options.unlock:
            try:
                ret = client.mark_user_active(args[1])
                msg = "unlocked"
            except ipa.ipaerror.exception_for(ipa.ipaerror.LDAP_EMPTY_MODLIST):
                print "User is already marked active"
                return 0
            except:
                raise
        else:
            try:
                ret = client.mark_user_inactive(args[1])
            except ipa.ipaerror.exception_for(ipa.ipaerror.LDAP_EMPTY_MODLIST):
                print "User is already marked inactive"
                return 0
            except:
                raise
            print args[1] + " successfully %s" % msg
    except xmlrpclib.Fault, fault:
        if fault.faultCode == errno.ECONNREFUSED:
            print "The IPA XML-RPC service is not responding."
        else:
            print fault.faultString
        return 1
    except kerberos.GSSError, e:
        print "Could not initialize GSSAPI: %s/%s" % (e[0][0][0], e[0][1][0])
        return 1
    except xmlrpclib.ProtocolError, e:
        print "Unable to connect to IPA server: %s" % (e.errmsg)
        return 1
    except ipa.ipaerror.IPAError, e:
        print "%s" % (e.message)
        return 1

    return 0

if __name__ == "__main__":
    sys.exit(main())
